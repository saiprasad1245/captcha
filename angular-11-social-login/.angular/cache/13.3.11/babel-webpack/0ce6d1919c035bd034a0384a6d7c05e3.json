{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/list\";\n\nfunction CaptchaComponent_mat_list_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list\", 15)(1, \"mat-list-item\", 16)(2, \"p\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", item_r2.randomString, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.display, \" \");\n  }\n}\n\nexport let CaptchaComponent = /*#__PURE__*/(() => {\n  class CaptchaComponent {\n    constructor(http, snackBar, router) {\n      this.http = http;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.title = 'Captcha Generator';\n      this.initialUrl = environment.apiBaseUrl;\n    }\n\n    ngOnInit() {}\n\n    generateRandomString(parameters) {\n      this.http.post(`${this.initialUrl}api/auth/randomData`, parameters).subscribe(data => {\n        this.randomStrings = data;\n        this.start();\n        console.log(this.randomStrings);\n      }, err => {\n        console.log(`Error occured ${err}`);\n      });\n    }\n\n    deleteCaptch(value) {\n      this.http.get(`${this.initialUrl}api/auth/deleteCaptcha/${value}`).subscribe(data => {\n        const randomData = {\n          length: 1,\n          size: 6,\n          upperCase: true,\n          lowerCase: true,\n          digits: true,\n          specialCharacters: false\n        };\n        this.generateRandomString(randomData);\n      });\n    }\n\n    submit(value) {\n      console.log(value);\n      return this.http.get(`${this.initialUrl}api/auth/random/check/${value}`).pipe(map(result => {\n        console.log(result);\n        return result;\n      }));\n    }\n\n    submitCaptcha(parameters) {\n      this.submit(parameters).subscribe(data => {\n        console.log(data);\n\n        if (data != null && data != undefined && data[0] != null) {\n          this.status = data[0].randomString;\n\n          if (this.status == parameters) {\n            this.status = \"success\";\n          } else {\n            this.status = \"failure\";\n          }\n        } else {\n          this.status = \"failure\";\n        }\n\n        console.log(this.status);\n      }, err => {\n        console.log(`Error occured ${err}`);\n      });\n    }\n\n    start() {\n      this.timer(1);\n    }\n\n    stop() {\n      clearInterval(this.timerInterval);\n    }\n\n    signOut() {\n      this.router.navigate(['/login']);\n    }\n\n    timer(minute) {\n      // let minute = 1;\n      let seconds = minute * 30;\n      let textSec = '0';\n      let statSec = 30;\n      const prefix = minute < 10 ? '0' : '';\n      this.timerInterval = setInterval(() => {\n        seconds--;\n        if (statSec != 0) statSec--;else statSec = 29;\n\n        if (statSec < 10) {\n          textSec = '0' + statSec;\n        } else textSec = statSec;\n\n        this.display = `${prefix}${Math.floor(seconds / 30)}:${textSec}`;\n\n        if (seconds == 0) {\n          clearInterval(this.timerInterval);\n          this.deleteCaptch(this.randomStrings[0].randomString);\n        }\n      }, 1000);\n    }\n\n    copyText(textToBeCopied) {\n      let textarea = null;\n      textarea = window.document.createElement(\"textarea\");\n      textarea.style.height = \"0px\";\n      textarea.style.left = \"-100px\";\n      textarea.style.opacity = \"0\";\n      textarea.style.position = \"fixed\";\n      textarea.style.top = \"-100px\";\n      textarea.style.width = \"0px\";\n      document.body.appendChild(textarea);\n      textarea.value = textToBeCopied;\n      textarea.select();\n      let successful = document.execCommand(\"copy\");\n\n      if (successful) {\n        this.snackBar.openFromComponent(CopiedComponent, {\n          duration: 500\n        });\n      }\n\n      if (textarea && textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n    }\n\n  }\n\n  CaptchaComponent.ɵfac = function CaptchaComponent_Factory(t) {\n    return new (t || CaptchaComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  CaptchaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CaptchaComponent,\n    selectors: [[\"captcha-page\"]],\n    decls: 30,\n    vars: 2,\n    consts: [[1, \"row\"], [1, \"col-md-4\", \"offset-md-4\", \"col-sm-6\", \"offset-sm-3\"], [1, \"card\", \"auth\"], [1, \"card-body\", \"auth-card\"], [1, \"card-demo\"], [1, \"containerX\"], [\"fxLayout\", \"row\", \"fxLayout.xs\", \"column\", \"fxLayout.sm\", \"column\", \"fxFlex\", \"\", 1, \"box\"], [\"fxFlex\", \"\"], [1, \"example-form\"], [1, \"full-width\"], [\"matInput\", \"\", \"type\", \"text\", 1, \"test-data\"], [\"captcha\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"test-data\"], [\"role\", \"list\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"list\"], [\"role\", \"listitem\"]],\n    template: function CaptchaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"mat-card\", 4)(5, \"mat-card-content\")(6, \"div\", 5)(7, \"div\", 6)(8, \"div\", 7)(9, \"form\", 8)(10, \"mat-form-field\", 9);\n        i0.ɵɵelement(11, \"p\")(12, \"p\");\n        i0.ɵɵelementStart(13, \"label\");\n        i0.ɵɵtext(14, \"Enter Captcha\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 10, 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"p\")(18, \"p\");\n        i0.ɵɵelementStart(19, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function CaptchaComponent_Template_button_click_19_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r0 = i0.ɵɵreference(16);\n\n          return ctx.submitCaptcha(_r0.value);\n        });\n        i0.ɵɵtext(20, \"submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"p\", 13);\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(23, \"p\");\n        i0.ɵɵelementStart(24, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function CaptchaComponent_Template_button_click_24_listener() {\n          return ctx.generateRandomString({\n            length: 1,\n            size: 6,\n            upperCase: true,\n            lowerCase: true,\n            digits: true,\n            specialCharacters: false\n          });\n        });\n        i0.ɵɵtext(25, \"GENERATE\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 7)(27, \"h1\");\n        i0.ɵɵtext(28, \"Captcha:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(29, CaptchaComponent_mat_list_29_Template, 6, 2, \"mat-list\", 14);\n        i0.ɵɵelementEnd()()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(22);\n        i0.ɵɵtextInterpolate1(\" status: \", ctx.status, \"\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.randomStrings);\n      }\n    },\n    directives: [i4.MatCard, i4.MatCardContent, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.NgForm, i6.MatFormField, i7.MatInput, i8.MatButton, i9.NgForOf, i10.MatList, i10.MatListItem],\n    styles: [\".full-width[_ngcontent-%COMP%]{width:95%}.test-data[_ngcontent-%COMP%]{color:#c72e6e}\"]\n  });\n  return CaptchaComponent;\n})();\nexport let CopiedComponent = /*#__PURE__*/(() => {\n  class CopiedComponent {}\n\n  CopiedComponent.ɵfac = function CopiedComponent_Factory(t) {\n    return new (t || CopiedComponent)();\n  };\n\n  CopiedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CopiedComponent,\n    selectors: [[\"copied-snack\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"copied-snack-bar\"]],\n    template: function CopiedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵtext(1, \" Copied \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".copied-snack-bar[_ngcontent-%COMP%]{color:#ff69b4}\"]\n  });\n  return CopiedComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nlet CaptchaComponent = class CaptchaComponent {\n  constructor(http, snackBar, router) {\n    this.http = http;\n    this.snackBar = snackBar;\n    this.router = router;\n    this.title = 'Captcha Generator';\n    this.initialUrl = environment.apiBaseUrl;\n  }\n\n  ngOnInit() {}\n\n  generateRandomString(parameters) {\n    this.http.post(`${this.initialUrl}api/auth/randomData`, parameters).subscribe(data => {\n      this.randomStrings = data;\n      this.start();\n      console.log(this.randomStrings);\n    }, err => {\n      console.log(`Error occured ${err}`);\n    });\n  }\n\n  deleteCaptch(value) {\n    this.http.get(`${this.initialUrl}api/auth/deleteCaptcha/${value}`).subscribe(data => {\n      const randomData = {\n        length: 1,\n        size: 6,\n        upperCase: true,\n        lowerCase: true,\n        digits: true,\n        specialCharacters: false\n      };\n      this.generateRandomString(randomData);\n    });\n  }\n\n  submit(value) {\n    console.log(value);\n    return this.http.get(`${this.initialUrl}api/auth/random/check/${value}`).pipe(map(result => {\n      console.log(result);\n      return result;\n    }));\n  }\n\n  submitCaptcha(parameters) {\n    this.submit(parameters).subscribe(data => {\n      console.log(data);\n\n      if (data != null && data != undefined && data[0] != null) {\n        this.status = data[0].randomString;\n\n        if (this.status == parameters) {\n          this.status = \"success\";\n        } else {\n          this.status = \"failure\";\n        }\n      } else {\n        this.status = \"failure\";\n      }\n\n      console.log(this.status);\n    }, err => {\n      console.log(`Error occured ${err}`);\n    });\n  }\n\n  start() {\n    this.timer(1);\n  }\n\n  stop() {\n    clearInterval(this.timerInterval);\n  }\n\n  signOut() {\n    this.router.navigate(['/login']);\n  }\n\n  timer(minute) {\n    // let minute = 1;\n    let seconds = minute * 30;\n    let textSec = '0';\n    let statSec = 30;\n    const prefix = minute < 10 ? '0' : '';\n    this.timerInterval = setInterval(() => {\n      seconds--;\n      if (statSec != 0) statSec--;else statSec = 29;\n\n      if (statSec < 10) {\n        textSec = '0' + statSec;\n      } else textSec = statSec;\n\n      this.display = `${prefix}${Math.floor(seconds / 30)}:${textSec}`;\n\n      if (seconds == 0) {\n        clearInterval(this.timerInterval);\n        this.deleteCaptch(this.randomStrings[0].randomString);\n      }\n    }, 1000);\n  }\n\n  copyText(textToBeCopied) {\n    let textarea = null;\n    textarea = window.document.createElement(\"textarea\");\n    textarea.style.height = \"0px\";\n    textarea.style.left = \"-100px\";\n    textarea.style.opacity = \"0\";\n    textarea.style.position = \"fixed\";\n    textarea.style.top = \"-100px\";\n    textarea.style.width = \"0px\";\n    document.body.appendChild(textarea);\n    textarea.value = textToBeCopied;\n    textarea.select();\n    let successful = document.execCommand(\"copy\");\n\n    if (successful) {\n      this.snackBar.openFromComponent(CopiedComponent, {\n        duration: 500\n      });\n    }\n\n    if (textarea && textarea.parentNode) {\n      textarea.parentNode.removeChild(textarea);\n    }\n  }\n\n};\nCaptchaComponent = __decorate([Component({\n  selector: 'captcha-page',\n  templateUrl: './captcha-page.component.html',\n  styleUrls: ['./captcha-page.component.css']\n})], CaptchaComponent);\nexport { CaptchaComponent };\nexport let CopiedComponent = /*#__PURE__*/(() => {\n  class CopiedComponent {}\n\n  CopiedComponent.ɵfac = function CopiedComponent_Factory(t) {\n    return new (t || CopiedComponent)();\n  };\n\n  CopiedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CopiedComponent,\n    selectors: [[\"copied-snack\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"copied-snack-bar\"]],\n    template: function CopiedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵtext(1, \" Copied \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".copied-snack-bar[_ngcontent-%COMP%]{color:#ff69b4}\"]\n  });\n  return CopiedComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}